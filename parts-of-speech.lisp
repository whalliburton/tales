(in-package :tales)

(defparameter *stem-dict* nil)

(defun parse-stem-line (line)
  (let ((parts (split-sequence:split-sequence #\space line)))
    (values (first parts) (group (cdr parts) 2))))

(defparameter *valid-tags* nil)

(defparameter *tag-descriptions*
  '(("CC"   "Coordinated conjunction")
    ("CD"   "Cardinal number")
    ("DT"   "Determiner")
    ("FW"   "Foreign word")
    ("IN"   "Preposition or subordinating conjunction")
    ("JJ"   "Adjective")
    ("JJR"  "Adjective, comparative")
    ("JJS"  "Adjective, superlative")
    ("MD"   "Modal")
    ("NN"   "Noun, singular or mass")
    ("NNS"  "Noun, plural")
    ("PDT"  "Predeterminer")
    ("POS"  "Possessive ending")
    ("PP$"  "Possessive pronoun")
    ("PRP"  "Personal pronoun")
    ("RB"   "Adverb")
    ("RBR"  "Adverb, comparative")
    ("RP"   "Particle")
    ("UH"   "Interjection")
    ("VB"   "Verb, base form")
    ("VBD"  "Verb, past tense")
    ("VBG"  "Verb, gerund or present participle")
    ("VBN"  "Verb, past participle")
    ("VBP"  "Verb, present tense, other than 3rd person singular")
    ("VBZ"  "Verb, present tense, 3rd person singular")
    ("WDT"  "Wh-determiner")
    ("WP"   "Wh-pronoun")
    ("WP$"  "Wh-pronoun, possessive")
    ("WRB"  "Wh-adverb")))

(defun print-pos-tags ()
  (iter (for tag in *valid-tags*)
        (when-let (description (assoc tag *tag-descriptions* :test #'string= ))
          (format t "~4A  ~A~%" tag (second description)))))

(defun pos (word)
  (gethash word *stem-dict*))

(defun load-pos-dict (&optional (filename (tales-file "documents/stem-dict.txt")))
  (setf *stem-dict* (make-hash-table :test 'equal) *valid-tags* nil)
  (iter (for line in (slurp-lines filename :latin-1))
        (multiple-value-bind (stem pos) (parse-stem-line line)
          (when (gethash stem *stem-dict*)
            (warn "duplicate stem ~A" stem))
          (setf (gethash stem *stem-dict*) pos)
          (iter (for (word tag) in pos)
                (pushnew tag *valid-tags* :test 'equal))))
  (setf *valid-tags* (sort *valid-tags* #'string<)))
